# -*- coding: utf-8 -*-
"""IO1_8.Transporte_clase.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1of7OpLIIc6eSIv2yxt0BO1_uQkVest68
"""

import cvxpy as cvx
import numpy as np

# Variables de decisión
x = cvx.Variable((3,4), nonneg = True)

# Función objetivo:

c = [
    [464,352,995],
    [513,416,682],
    [654,690,388],
    [867,791,685]
]

Z = cvx.Minimize(cvx.sum(cvx.multiply(c,x)))

# Restricciones

r = [
    # oferta
    cvx.sum(x[0,:]) <= 75,
    cvx.sum(x[1,:]) <= 125,
    cvx.sum(x[2,:]) <= 100,
     
     # demanda
    cvx.sum(x[:,0]) >= 80,
    cvx.sum(x[:,1]) >= 65,
    cvx.sum(x[:,2]) >= 70,
    cvx.sum(x[:,3]) >= 85,
          
]

# Configurar el problema
P = cvx.Problem(Z,r)

# Solucionar
P.solve()

print(P.status)
print(P.value)
print(np.round(x.value,0))

# Verificación del equilibrio: O == D
Toda la oferta del sistema : 300 (75+125+100)
Toda la demanda del sistema : 300 (80+65+70+85)

# Caso 2: Desequilibrio O > D

# Variables de decisión
x = cvx.Variable((3,4), nonneg = True)

# Función objetivo:

c = [
    [464,352,995],
    [513,416,682],
    [654,690,388],
    [867,791,685]
]

Z = cvx.Minimize(cvx.sum(cvx.multiply(c,x)))

# Restricciones

r = [
    # oferta
    cvx.sum(x[0,:]) <= 175,
    cvx.sum(x[1,:]) <= 125,
    cvx.sum(x[2,:]) <= 100,
     
     # demanda
    cvx.sum(x[:,0]) >= 80,
    cvx.sum(x[:,1]) >= 65,
    cvx.sum(x[:,2]) >= 70,
    cvx.sum(x[:,3]) >= 85,
          
]

# Configurar el problema
P = cvx.Problem(Z,r)

# Solucionar
P.solve()

print(P.status)
print(P.value)
print(np.round(x.value,0))

# Caso 2: Desequilibrio O > D y hay que repartir toda la oferta

# Variables de decisión
x = cvx.Variable((3,4), nonneg = True)

# Función objetivo:

c = [
    [464,352,995],
    [513,416,682],
    [654,690,388],
    [867,791,685]
]

Z = cvx.Minimize(cvx.sum(cvx.multiply(c,x)))

# Restricciones

r = [
    # oferta
    cvx.sum(x[0,:]) <= 175,
    cvx.sum(x[1,:]) <= 125,
    cvx.sum(x[2,:]) <= 100,
     
     # demanda
    cvx.sum(x[:,0]) >= 80,
    cvx.sum(x[:,1]) >= 65,
    cvx.sum(x[:,2]) >= 70,
    cvx.sum(x[:,3]) >= 85,
     
    # repartir todo lo de Buriticá
    cvx.sum(x[0,:]) >= 175,
]

# Configurar el problema
P = cvx.Problem(Z,r)

# Solucionar
P.solve()

print(P.status)
print(P.value)
print(np.round(x.value,0))

# Desequilibrio O < D

# Variables de decisión
x = cvx.Variable((4,4), nonneg = True)

# Función objetivo:

c = [
    [464,352,995,0],
    [513,416,682,0],
    [654,690,388,0],
    [867,791,685,0]
]

Z = cvx.Minimize(cvx.sum(cvx.multiply(c,x)))

# Restricciones

r = [
    # oferta
    cvx.sum(x[0,:]) <= 55,
    cvx.sum(x[1,:]) <= 125,
    cvx.sum(x[2,:]) <= 100,
    cvx.sum(x[3,:]) <= 20,
     
     # demanda
    cvx.sum(x[:,0]) >= 80,
    cvx.sum(x[:,1]) >= 65,
    cvx.sum(x[:,2]) >= 70,
    cvx.sum(x[:,3]) >= 85,
          
]

# Configurar el problema
P = cvx.Problem(Z,r)

# Solucionar
P.solve()

print(P.status)
print(P.value)
print(np.round(x.value,0))

# Variables de decisión
x = cvx.Variable((3,4), nonneg = True)

# Función objetivo:

c = [
    [464,352,995],
    [513,416,682],
    [654,690,388],
    [867,791,685]
]

Z = cvx.Minimize(cvx.sum(cvx.multiply(c,x)))

# Restricciones

r = [
    # oferta
    cvx.sum(x[0,:]) <= 75,
    cvx.sum(x[1,:]) <= 125,
    cvx.sum(x[2,:]) <= 100,
     
     # demanda
    cvx.sum(x[:,0]) >= 80,
    cvx.sum(x[:,1]) >= 65,
    cvx.sum(x[:,2]) >= 70,
    cvx.sum(x[:,3]) >= 85,
     
     # restricciones de los arcos
    x[0,3] >= 60,
          
]

# Configurar el problema
P = cvx.Problem(Z,r)

# Solucionar
P.solve()

print(P.status)
print(P.value)
print(np.round(x.value,0))

# Variables de decisión
x = cvx.Variable((3,4), nonneg = True)

# Función objetivo:

c = [
    [464,352,995],
    [513,416,682],
    [654,690,388],
    [999999,791,685]
]

Z = cvx.Minimize(cvx.sum(cvx.multiply(c,x)))

# Restricciones

r = [
    # oferta
    cvx.sum(x[0,:]) <= 75,
    cvx.sum(x[1,:]) <= 125,
    cvx.sum(x[2,:]) <= 100,
     
     # demanda
    cvx.sum(x[:,0]) >= 80,
    cvx.sum(x[:,1]) >= 65,
    cvx.sum(x[:,2]) >= 70,
    cvx.sum(x[:,3]) >= 85,
     
]

# Configurar el problema
P = cvx.Problem(Z,r)

# Solucionar
P.solve()

print(P.status)
print(P.value)
print(np.round(x.value,0))







# Variables de decisión
x = cvx.Variable((3,4), nonneg = True)

# Función objetivo:

c = [
    [464,352,995],
    [513,416,682],
    [654,690,388],
    [867,791,685]
]

Z = cvx.Minimize(cvx.sum(cvx.multiply(c,x)))

# Restricciones

r = [
    # oferta
    cvx.sum(x[0,:]) <= 175,
    cvx.sum(x[1,:]) <= 125,
    cvx.sum(x[2,:]) <= 100,
     
     # demanda
    cvx.sum(x[:,0]) >= 80,
    cvx.sum(x[:,1]) >= 65,
    cvx.sum(x[:,2]) >= 70,
    cvx.sum(x[:,3]) >= 85,
    
    cvx.sum(x[0,:]) >= 175,
    #cvx.sum(x) >= 175 + 125 + 100
         
]

# Configurar el problema
P = cvx.Problem(Z,r)

# Solucionar
P.solve()

print(P.status)
print(P.value)
print(np.round(x.value,0))